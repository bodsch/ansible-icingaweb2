---

- name: include OS specific configuration
  ansible.builtin.include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      paths:
        - "vars"
      files:
        # eg. debian-10 / ubuntu-20 / centos-8 / oraclelinux-8
        - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}.yaml"
        # eg. archlinux-systemd / archlinux-openrc
        - "{{ ansible_distribution | lower }}-{{ ansible_service_mgr | lower }}.yaml"
        # eg. debian / ubuntu / centos / oraclelinux
        - "{{ ansible_distribution | lower }}.yaml"
        # eg. redhat / debian
        - "{{ ansible_os_family | lower }}.yaml"
        - default.yaml
      skip: true


- name: python3-apt for debian
  when:
    - ansible_os_family | lower == 'debian'
  block:
    - name: make sure python3-apt is installed (only debian based)
      ansible.builtin.package:
        name:
          - python3-apt
        state: present
      register: _installed

    - name: update apt cache
      when:
        - _installed.changed
      block:
        - name: clean apt cache  # noqa command-instead-of-module
          ansible.builtin.command: |
            apt-get clean
          register: apt_clean
          changed_when: apt_clean.rc != 0
          failed_when: apt_clean.rc != 0
          when: "ansible_version.full is version_compare('2.13', '<')"

        - name: clean apt cache
          ansible.builtin.apt:
            clean: true
          when: "ansible_version.full is version_compare('2.13', '>=')"

- name: create local temp directory
  become: false
  delegate_to: 127.0.0.1
  ansible.builtin.file:
    path: "{{ icingaweb_local_tmp_directory }}"
    state: directory
    mode: 0755

- name: get version of installed php
  package_version:
    package_name: "php"
    state: installed
  register: package_version

- name: define php version
  ansible.builtin.set_fact:
    php_version: "{{ package_version.available.full_version }}"
    php_major_version: "{{ package_version.available.major_version }}"
    php_package_version: "{{ package_version.available.version_string_compressed }}"
  when:
    - package_version is defined
    - package_version.available is defined
    - package_version.available.full_version is defined
    - package_version.available.major_version is defined
    - package_version.available.version_string_compressed is defined

- name: assert php_version for icingaweb {{ icingaweb_version }}
  ansible.builtin.assert:
    that:
      - php_version is defined
      - php_version is version_compare('7', '>=')
      - php_version is version_compare('8.2', '<')
    msg: "This role only works with PHP >= 7.0 and < {{ icingaweb_php_min_version }} .. found: {{ php_version }}"
  when:
    - icingaweb_version is version('2.11', '<=', strict=True)

- name: arch specific
  when:
    - ansible_distribution | lower == 'archlinux'
  block:
    - name: detect installed php binary
      ansible.builtin.stat:
        path: /usr/sbin/php
        get_checksum: false
      register: _php_binary
      ignore_errors: true

    - name: create unified link to php binary
      ansible.builtin.file:
        src: "/usr/sbin/php{{ php_major_version }}"
        dest: /usr/sbin/php
        state: link
        force: true
      when:
        - _php_binary is defined
        - _php_binary.stat is defined
        - _php_binary.stat.exists is defined
        - not _php_binary.stat.exists

- name: merge dependencies between defaults and custom
  ansible.builtin.set_fact:
    icingaweb_dependencies: "{{ icingaweb_dependencies + icingaweb_packages }}"

- name: get installed database package name
  package_version:
    package_name: "{{ _icingaweb_package_mariadb_clients }}"
    state: installed
  register: package_version

- name: remove mariadb-client-core from dependency list if it already installed
  ansible.builtin.set_fact:
    icingaweb_dependencies: "{{ icingaweb_dependencies | reject('search', 'default-mysql-client-core') | list }}"
  when:
    - package_version is defined
    - package_version.available is defined
    - package_version.available.full_version is defined

- name: merge dependencies between defaults and custom for enabled icingaweb modules
  ansible.builtin.set_fact:
    icingaweb_modules_enabled: "{{ icingaweb_defaults_modules_enabled + icingaweb_modules_enabled }}"

- name: merge icingaweb configuration between defaults and custom
  ansible.builtin.set_fact:
    icingaweb_groups: "{{ icingaweb_defaults_groups | combine(icingaweb_groups, recursive=True) }}"
    icingaweb_authentication: "{{ icingaweb_defaults_authentication | combine(icingaweb_authentication, recursive=True) }}"
    icingaweb_resources: "{{ icingaweb_defaults_resources | combine(icingaweb_resources, recursive=True) }}"
    icingaweb_icingadb: "{{ icingaweb_defaults_icingadb | combine(icingaweb_icingadb, recursive=True) }}"
    icingaweb_php_daemon: "{{ icingaweb_defaults_php_daemon | combine(icingaweb_php_daemon, recursive=True) }}"

- name: install requirements
  ansible.builtin.package:
    name: "{{ icingaweb_dependencies }}"
    state: present

- name: handle icingaweb group
  when:
    - not icingaweb_group is defined or icingaweb_group | length > 0
  block:
    - name: "find primary group for user '{{ icingaweb_user }}'"
      become: true
      ansible.builtin.getent:
        database: group
        key: "{{ icingaweb_user }}"
        split: ':'

    - name: "set icingaweb_group '{{ getent_group | list | first }}'"
      ansible.builtin.set_fact:
        icingaweb_group: "{{ getent_group | list | first }}"
      when:
        - getent_group is defined
...
